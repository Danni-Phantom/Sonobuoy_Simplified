#!/bin/bash
echo "Welcome to the Sonobuoy Simplified Tool"

# Functions
install_sono() {
  VERSION="0.16.1"
  OS="darwin"
  wget "https://github.com/vmware-tanzu/sonobuoy/releases/download/v${VERSION}/sonobuoy_${VERSION}_${OS}_amd64.tar.gz"
  sono_install_zip=$(("sonobuoy_" + VERSION + "_" + OS + "_amd64.tar.gz"))
  tar -xzf "$HOME"/bin/"$sono_install_zip" -C "$HOME"/bin
  chmod +x "$HOME"/bin/sonobuoy
  echo "Sonobuoy has been installed!"
  exit
}

run_sono() {
  echo "Which Sonobuoy Test would you like to run?"
  echo "1. non-disruptive-conformance"
  echo "2. quick"
  echo "3. certified-conformance"
  read -r -n 1 ans
  printf "\n"
  if [[ "$ans" == '' ]]; then
    ans=2
    echo "Running quick Sonobuoy Test"
  fi
  printf "\n"
  case "$ans" in
    1 )
      echo "Running non-disruptive-conformance test!"
      sonobuoy run --wait  &
    ;;
    2 )
      echo "Running quick test!"
      sonobuoy run --wait --mode quick &
    ;;
    3 )
      echo "Running certified-conformance test!"
      sonobuoy run --wait --mode certified-conformance &
    ;;
    Q | q )
      exit
    ;;
    * )
      echo "Invalid input $ans"
      run_sono
    ;;
  esac

  while [[ flag -eq 1 ]]; do {
  sleep 1
  sonobuoy status | grep -Po '"total":.*?[^\\]",'
  wait && (flag=0 || flag=1)
  } done

  exit
}

get_results() {
  echo "Name of new directory:"
  read -r dir_s
  printf "\n"
  if [[ "$dir_s" == '' ]]; then
   dir_s="sonobuoy_results_$(date)"
  fi
  printf "\n"
  output=$(sonobuoy retrieve)
  mkdir ./"$dir_s"
  tar xzf "$output" -C ./"$dir_s"
  exit
}

pretty_results() {
  results=$(sonobuoy retrieve)
  echo "Save results to file? "
  read -r -n 1 YoN
  printf "\n"
  if [[ "$YoN" == '' ]]; then
    YoN='N'
  fi
  if [[ $YoN == 'Y' ]]; then {
    echo "File Name: "
    read -r fileName
    printf "\n"
    if [[ "$fileName" == '' ]]; then
        fileName="sonobuoy_report_$(date)"
    fi
    sonobuoy results "$results" >> "$fileName".txt
    sonobuoy results "$results:"
    exit;
  }
  else
    sonobuoy results "$results"
    exit;
  fi
}

status() {
  sonobuoy status --json | jq
}

delete() {
  sonobuoy delete --wait
  exit
}

more_info() {
  sonobuoy -h
  exit
}

helpMsg() {
  printf "The purpose of this script is to be able to run the kubernetes conformance tool sonobuoy without having to become familiar with the intracacies of the options and tools that it provides. \n"
  printf "More information on Sonobuoy can be found at https://sonobuoy.io/ \n\n"
  printf "Usage: %s {-h | -i | -g | -p | -s | -d | -m} \n\n" "$0"
  printf "Options: \n"
  printf "\t -h \t --help \t help \t displays this help message \n"
  printf "\t -i \t --install \t install the sonobuoy tool \n"
  printf "\t -r \t --run \t\t displays options and runs sonobuoy tool \n"
  printf "\t -g \t --get-results \t this gets the full dump results generated by sonobuoy after the tool is run \n"
  printf "\t -p \t --pretty \t this gets the condensed results generated by the sonobuoy tool \n"
  printf "\t -s \t --status \t this displays the current status of the sonobuoy test being run. A full run can take several hours* \n"
  printf "\t -d \t --delete \t this deletes the current sonobuoy namespace so that a new test can be run. Try running this option if you encounter namespace errors \n"
  printf "\t -m \t --more-info \t this prints the help page for the main sonobuoy executable \n"
  printf "\n *jq package needs to be installed for some functionalities* \n"
  exit
}

# the main meat of the program
if [[ "$1" == '' ]]; then
  helpMsg
  exit
fi

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  -h | --help )
    helpMsg
  ;;
  -r | --run )
    shift; run_sono
  ;;
  -i | --install )
    shift; install_sono
  ;;
  -g | --get-results )
    shift; get_results
  ;;
  -p | --pretty )
    shift; pretty_results
  ;;
  -s | --status )
    shift; status
  ;;
  -d | --delete )
    shift; delete
  ;;
  -m | --more-info )
    shift; more_info
  ;;
  * )
    echo "Usage: $0 {-h | -i | -g | -p | -s | -d | -m}"
  ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi

wait
exit
